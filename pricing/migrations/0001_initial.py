# Generated by Django 5.2.4 on 2025-07-03 20:29

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PricingTier',
            fields=[
                ('tier_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tier_name', models.CharField(help_text='Name of the pricing tier', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the tier')),
                ('discount_percentage', models.DecimalField(decimal_places=2, help_text='Default discount percentage for this tier', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('minimum_order_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum order value to qualify for this tier', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether tier is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'pricing_tiers',
                'ordering': ['tier_name'],
            },
        ),
        migrations.CreateModel(
            name='Retailer',
            fields=[
                ('retailer_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('retailer_name', models.CharField(help_text='Name of the retailer', max_length=255)),
                ('contact_person', models.CharField(blank=True, help_text='Primary contact person', max_length=255)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=20)),
                ('address', models.TextField(blank=True, help_text='Business address')),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('pincode', models.CharField(blank=True, max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether retailer is active')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'retailers',
                'ordering': ['retailer_name'],
            },
        ),
        migrations.CreateModel(
            name='DynamicPricing',
            fields=[
                ('pricing_rule_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rule_name', models.CharField(help_text='Name of the pricing rule', max_length=255)),
                ('apply_to_expiring_batches', models.BooleanField(default=False, help_text='Apply to batches nearing expiry')),
                ('expiry_threshold_days', models.IntegerField(blank=True, help_text='Days before expiry to trigger pricing', null=True)),
                ('expiry_discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Additional discount for expiring batches', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('volume_tier_quantity', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum quantity for volume discount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('volume_discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Volume discount percentage', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_time', models.DateTimeField(blank=True, help_text='Start time for time-based pricing', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='End time for time-based pricing', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether rule is active')),
                ('priority', models.IntegerField(default=0, help_text='Rule priority (higher number = higher priority)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_pricing_rules', to='inventory.product')),
                ('retailer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_pricing_rules', to='pricing.retailer')),
            ],
            options={
                'db_table': 'dynamic_pricing',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RetailerPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Custom discount for this specific product-retailer combination', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('custom_price', models.DecimalField(blank=True, decimal_places=2, help_text='Custom fixed price for this specific product-retailer combination', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('effective_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When this pricing becomes effective')),
                ('effective_to', models.DateTimeField(blank=True, help_text='When this pricing expires', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pricing is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pricing_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='retailer_assignments', to='pricing.pricingtier')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retailer_pricing', to='inventory.product')),
                ('retailer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_assignments', to='pricing.retailer')),
            ],
            options={
                'db_table': 'retailer_pricing',
                'ordering': ['-effective_from'],
                'unique_together': {('retailer', 'product')},
            },
        ),
    ]
